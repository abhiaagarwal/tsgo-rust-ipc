KindSourceFile [0, 388), i=1, next=0
  NodeList [0, 388), i=2, next=0
    KindForStatement [0, 67), i=3, next=18
      KindFalseKeyword [6, 12), i=4, next=5
      KindBlock [14, 67), i=5, next=0
        NodeList [16, 64), i=6, next=0
          KindBlock [16, 64), i=7, next=0
            NodeList [23, 57), i=8, next=0
              KindVariableStatement [23, 39), i=9, next=14
                KindVariableDeclarationList [23, 38), i=10, next=0
                  NodeList [36, 38), i=11, next=0
                    KindVariableDeclaration [36, 38), i=12, next=0
                      KindIdentifier "x" [36, 38), i=13, next=0
              KindExpressionStatement [39, 57), i=14, next=0
                KindArrowFunction [39, 56), i=15, next=0
                  KindEqualsGreaterThanToken [51, 54), i=16, next=17
                  KindIdentifier "x" [54, 56), i=17, next=0
    KindForStatement [67, 136), i=18, next=34
      KindFalseKeyword [77, 83), i=19, next=20
      KindBlock [85, 136), i=20, next=0
        NodeList [87, 133), i=21, next=0
          KindBlock [87, 133), i=22, next=0
            NodeList [94, 126), i=23, next=0
              KindVariableStatement [94, 110), i=24, next=29
                KindVariableDeclarationList [94, 109), i=25, next=0
                  NodeList [107, 109), i=26, next=0
                    KindVariableDeclaration [107, 109), i=27, next=0
                      KindIdentifier "y" [107, 109), i=28, next=0
              KindExpressionStatement [110, 126), i=29, next=0
                KindBinaryExpression [110, 125), i=30, next=0
                  KindIdentifier "y" [110, 121), i=31, next=32
                  KindEqualsToken [121, 123), i=32, next=33
                  KindNumericLiteral [123, 125), i=33, next=0
    KindForStatement [136, 264), i=34, next=55
      KindFalseKeyword [146, 152), i=35, next=36
      KindBlock [154, 264), i=36, next=0
        NodeList [156, 261), i=37, next=0
          KindSwitchStatement [156, 261), i=38, next=0
            KindNumericLiteral [170, 171), i=39, next=40
            KindCaseBlock [172, 261), i=40, next=0
              NodeList [173, 254), i=41, next=0
                KindCaseClause [173, 254), i=42, next=0
                  KindNumericLiteral [187, 189), i=43, next=44
                  NodeList [190, 254), i=44, next=0
                    KindVariableStatement [190, 211), i=45, next=50
                      KindVariableDeclarationList [190, 210), i=46, next=0
                        NodeList [207, 210), i=47, next=0
                          KindVariableDeclaration [207, 210), i=48, next=0
                            KindIdentifier "z0" [207, 210), i=49, next=0
                    KindExpressionStatement [211, 234), i=50, next=54
                      KindArrowFunction [211, 233), i=51, next=0
                        KindEqualsGreaterThanToken [227, 230), i=52, next=53
                        KindIdentifier "z0" [230, 233), i=53, next=0
                    KindBreakStatement [234, 254), i=54, next=0
    KindForStatement [264, 388), i=55, next=0
      KindFalseKeyword [274, 280), i=56, next=57
      KindBlock [282, 388), i=57, next=0
        NodeList [284, 385), i=58, next=0
          KindSwitchStatement [284, 385), i=59, next=0
            KindNumericLiteral [298, 299), i=60, next=61
            KindCaseBlock [300, 385), i=61, next=0
              NodeList [301, 378), i=62, next=0
                KindCaseClause [301, 378), i=63, next=0
                  KindNumericLiteral [315, 317), i=64, next=65
                  NodeList [318, 378), i=65, next=0
                    KindVariableStatement [318, 338), i=66, next=71
                      KindVariableDeclarationList [318, 337), i=67, next=0
                        NodeList [335, 337), i=68, next=0
                          KindVariableDeclaration [335, 337), i=69, next=0
                            KindIdentifier "z" [335, 337), i=70, next=0
                    KindExpressionStatement [338, 358), i=71, next=76
                      KindBinaryExpression [338, 357), i=72, next=0
                        KindIdentifier "z" [338, 353), i=73, next=74
                        KindEqualsToken [353, 355), i=74, next=75
                        KindNumericLiteral [355, 357), i=75, next=0
                    KindBreakStatement [358, 378), i=76, next=0
