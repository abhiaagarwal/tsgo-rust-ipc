KindSourceFile [0, 214), i=1, next=0
  NodeList [0, 214), i=2, next=0
    KindVariableStatement [0, 11), i=3, next=9
      KindVariableDeclarationList [0, 10), i=4, next=0
        NodeList [3, 10), i=5, next=0
          KindVariableDeclaration [3, 10), i=6, next=0
            KindIdentifier "x" [3, 5), i=7, next=8
            KindNumericLiteral [7, 10), i=8, next=0
    KindTryStatement [11, 98), i=9, next=43
      KindBlock [16, 37), i=10, next=20
        NodeList [18, 34), i=11, next=0
          KindExpressionStatement [18, 34), i=12, next=0
            KindBinaryExpression [18, 33), i=13, next=0
              KindIdentifier "x" [18, 25), i=14, next=15
              KindEqualsToken [25, 27), i=15, next=16
              KindBinaryExpression [27, 33), i=16, next=0
                KindIdentifier "x" [27, 29), i=17, next=18
                KindPlusToken [29, 31), i=18, next=19
                KindNumericLiteral [31, 33), i=19, next=0
      KindCatchClause [37, 68), i=20, next=33
        KindVariableDeclaration [45, 46), i=21, next=23
          KindIdentifier "e" [45, 46), i=22, next=0
        KindBlock [47, 68), i=23, next=0
          NodeList [49, 65), i=24, next=0
            KindExpressionStatement [49, 65), i=25, next=0
              KindBinaryExpression [49, 64), i=26, next=0
                KindIdentifier "x" [49, 56), i=27, next=28
                KindEqualsToken [56, 58), i=28, next=29
                KindBinaryExpression [58, 64), i=29, next=0
                  KindIdentifier "x" [58, 60), i=30, next=31
                  KindMinusToken [60, 62), i=31, next=32
                  KindNumericLiteral [62, 64), i=32, next=0
      KindBlock [76, 98), i=33, next=0
        NodeList [78, 95), i=34, next=0
          KindExpressionStatement [78, 95), i=35, next=0
            KindBinaryExpression [78, 94), i=36, next=0
              KindIdentifier "x" [78, 85), i=37, next=38
              KindEqualsToken [85, 87), i=38, next=39
              KindBinaryExpression [87, 94), i=39, next=0
                KindIdentifier "x" [87, 89), i=40, next=41
                KindAsteriskToken [89, 91), i=41, next=42
                KindNumericLiteral [91, 94), i=42, next=0
    KindTryStatement [98, 214), i=43, next=0
      KindBlock [103, 149), i=44, next=57
        NodeList [106, 146), i=45, next=0
          KindExpressionStatement [106, 122), i=46, next=54
            KindBinaryExpression [106, 121), i=47, next=0
              KindIdentifier "x" [106, 113), i=48, next=49
              KindEqualsToken [113, 115), i=49, next=50
              KindBinaryExpression [115, 121), i=50, next=0
                KindIdentifier "x" [115, 117), i=51, next=52
                KindPlusToken [117, 119), i=52, next=53
                KindNumericLiteral [119, 121), i=53, next=0
          KindThrowStatement [122, 146), i=54, next=0
            KindNewExpression [133, 145), i=55, next=0
              KindIdentifier "Error" [137, 143), i=56, next=0
      KindCatchClause [149, 182), i=57, next=70
        KindVariableDeclaration [158, 159), i=58, next=60
          KindIdentifier "e" [158, 159), i=59, next=0
        KindBlock [160, 182), i=60, next=0
          NodeList [163, 179), i=61, next=0
            KindExpressionStatement [163, 179), i=62, next=0
              KindBinaryExpression [163, 178), i=63, next=0
                KindIdentifier "x" [163, 170), i=64, next=65
                KindEqualsToken [170, 172), i=65, next=66
                KindBinaryExpression [172, 178), i=66, next=0
                  KindIdentifier "x" [172, 174), i=67, next=68
                  KindMinusToken [174, 176), i=68, next=69
                  KindNumericLiteral [176, 178), i=69, next=0
      KindBlock [191, 214), i=70, next=0
        NodeList [194, 211), i=71, next=0
          KindExpressionStatement [194, 211), i=72, next=0
            KindBinaryExpression [194, 210), i=73, next=0
              KindIdentifier "x" [194, 201), i=74, next=75
              KindEqualsToken [201, 203), i=75, next=76
              KindBinaryExpression [203, 210), i=76, next=0
                KindIdentifier "x" [203, 205), i=77, next=78
                KindAsteriskToken [205, 207), i=78, next=79
                KindNumericLiteral [207, 210), i=79, next=0
